(() => {
  'use strict';
  var e = {
      132: function (e, t, r) {
        var n =
            (this && this.__assign) ||
            function () {
              return (n =
                Object.assign ||
                function (e) {
                  for (var t, r = 1, n = arguments.length; r < n; r++)
                    for (var i in (t = arguments[r]))
                      Object.prototype.hasOwnProperty.call(t, i) &&
                        (e[i] = t[i]);
                  return e;
                }).apply(this, arguments);
            },
          i =
            (this && this.__awaiter) ||
            function (e, t, r, n) {
              return new (r || (r = Promise))(function (i, s) {
                function a(e) {
                  try {
                    u(n.next(e));
                  } catch (e) {
                    s(e);
                  }
                }
                function o(e) {
                  try {
                    u(n.throw(e));
                  } catch (e) {
                    s(e);
                  }
                }
                function u(e) {
                  var t;
                  e.done
                    ? i(e.value)
                    : ((t = e.value),
                      t instanceof r
                        ? t
                        : new r(function (e) {
                            e(t);
                          })).then(a, o);
                }
                u((n = n.apply(e, t || [])).next());
              });
            },
          s =
            (this && this.__generator) ||
            function (e, t) {
              var r,
                n,
                i,
                s,
                a = {
                  label: 0,
                  sent: function () {
                    if (1 & i[0]) throw i[1];
                    return i[1];
                  },
                  trys: [],
                  ops: [],
                };
              return (
                (s = { next: o(0), throw: o(1), return: o(2) }),
                'function' == typeof Symbol &&
                  (s[Symbol.iterator] = function () {
                    return this;
                  }),
                s
              );
              function o(s) {
                return function (o) {
                  return (function (s) {
                    if (r)
                      throw new TypeError('Generator is already executing.');
                    for (; a; )
                      try {
                        if (
                          ((r = 1),
                          n &&
                            (i =
                              2 & s[0]
                                ? n.return
                                : s[0]
                                ? n.throw || ((i = n.return) && i.call(n), 0)
                                : n.next) &&
                            !(i = i.call(n, s[1])).done)
                        )
                          return i;
                        switch (
                          ((n = 0), i && (s = [2 & s[0], i.value]), s[0])
                        ) {
                          case 0:
                          case 1:
                            i = s;
                            break;
                          case 4:
                            return a.label++, { value: s[1], done: !1 };
                          case 5:
                            a.label++, (n = s[1]), (s = [0]);
                            continue;
                          case 7:
                            (s = a.ops.pop()), a.trys.pop();
                            continue;
                          default:
                            if (
                              !(
                                (i =
                                  (i = a.trys).length > 0 && i[i.length - 1]) ||
                                (6 !== s[0] && 2 !== s[0])
                              )
                            ) {
                              a = 0;
                              continue;
                            }
                            if (
                              3 === s[0] &&
                              (!i || (s[1] > i[0] && s[1] < i[3]))
                            ) {
                              a.label = s[1];
                              break;
                            }
                            if (6 === s[0] && a.label < i[1]) {
                              (a.label = i[1]), (i = s);
                              break;
                            }
                            if (i && a.label < i[2]) {
                              (a.label = i[2]), a.ops.push(s);
                              break;
                            }
                            i[2] && a.ops.pop(), a.trys.pop();
                            continue;
                        }
                        s = t.call(e, a);
                      } catch (e) {
                        (s = [6, e]), (n = 0);
                      } finally {
                        r = i = 0;
                      }
                    if (5 & s[0]) throw s[1];
                    return { value: s[0] ? s[1] : void 0, done: !0 };
                  })([s, o]);
                };
              }
            };
        Object.defineProperty(t, '__esModule', { value: !0 });
        var a = r(480),
          o = r(934),
          u = r(365),
          c = r(202),
          f = r(595),
          d = 'https://api.airtable.com/v0',
          l = [
            'fields',
            'filterByFormula',
            'maxRecords',
            'pageSize',
            'sort',
            'view',
          ],
          h = function (e, t, r) {
            var h = this;
            if (
              ((this.select = function (e, t, r) {
                return i(h, void 0, void 0, function () {
                  var i, h, y, p, w, b, v, m, g, j, O;
                  return s(this, function (s) {
                    switch (s.label) {
                      case 0:
                        if (
                          (s.trys.push([0, 20, , 21]),
                          c.default(e, 'table', 'string', !0),
                          c.default(t, 'options', 'object'),
                          c.default(r, 'page', 'number'),
                          (i = d + '/' + this.base + '/' + e),
                          (h = t ? n({}, t) : {}),
                          Object.keys(h).forEach(function (e) {
                            if (!l.includes(e))
                              throw new Error('Invalid option: ' + e);
                          }),
                          (y = ''),
                          (p = []),
                          !r)
                        )
                          return [3, 10];
                        (w = 0), (s.label = 1);
                      case 1:
                        if (!(w < r)) return [3, 9];
                        y && (h.offset = y), (s.label = 2);
                      case 2:
                        return (
                          s.trys.push([2, 7, , 8]),
                          [
                            4,
                            a.default(i + '?' + o.default(h), {
                              headers: {
                                Authorization: 'Bearer ' + this.apiKey,
                              },
                            }),
                          ]
                        );
                      case 3:
                        return [4, (m = s.sent()).json()];
                      case 4:
                        if (((g = s.sent()), !u.default(m.status)))
                          return [3, 6];
                        if (429 !== m.status)
                          throw new Error(JSON.stringify(g));
                        return this.retryOnRateLimit
                          ? w + 1 !== r
                            ? [3, 6]
                            : [
                                4,
                                f.default(
                                  i + '?' + o.default(h),
                                  {
                                    headers: {
                                      Authorization: 'Bearer ' + this.apiKey,
                                    },
                                  },
                                  this.retryTimeout,
                                  this.maxRetry,
                                  'records',
                                ),
                              ]
                          : [3, 6];
                      case 5:
                        return [2, s.sent()];
                      case 6:
                        return w + 1 === r
                          ? [2, g.records]
                          : ((y = g.offset), [3, 8]);
                      case 7:
                        throw ((b = s.sent()), new Error(b));
                      case 8:
                        return w++, [3, 1];
                      case 9:
                        return [3, 19];
                      case 10:
                        (v = !1), (s.label = 11);
                      case 11:
                        if (v) return [3, 19];
                        y && (h.offset = y), (s.label = 12);
                      case 12:
                        return (
                          s.trys.push([12, 17, , 18]),
                          [
                            4,
                            a.default(i + '?' + o.default(h), {
                              headers: {
                                Authorization: 'Bearer ' + this.apiKey,
                              },
                            }),
                          ]
                        );
                      case 13:
                        return [4, (m = s.sent()).json()];
                      case 14:
                        if (((g = s.sent()), !u.default(m.status)))
                          return [3, 16];
                        if (429 !== m.status)
                          throw new Error(JSON.stringify(g));
                        return this.retryOnRateLimit
                          ? [
                              4,
                              f.default(
                                i + '?' + o.default(h),
                                {
                                  headers: {
                                    Authorization: 'Bearer ' + this.apiKey,
                                  },
                                },
                                this.retryTimeout,
                                this.maxRetry,
                                'records',
                              ),
                            ]
                          : [3, 16];
                      case 15:
                        return [2, s.sent()];
                      case 16:
                        return (
                          (p = p.concat(g.records)),
                          (y = g.offset),
                          g.offset || (v = !0),
                          [3, 18]
                        );
                      case 17:
                        throw ((j = s.sent()), new Error(j));
                      case 18:
                        return [3, 11];
                      case 19:
                        return [2, p];
                      case 20:
                        throw ((O = s.sent()), new Error(O));
                      case 21:
                        return [2];
                    }
                  });
                });
              }),
              (this.find = function (e, t) {
                return i(h, void 0, void 0, function () {
                  var r, n, i, o;
                  return s(this, function (s) {
                    switch (s.label) {
                      case 0:
                        return (
                          s.trys.push([0, 5, , 6]),
                          c.default(e, 'table', 'string', !0),
                          c.default(t, 'id', 'string', !0),
                          (r = d + '/' + this.base + '/' + e + '/' + t),
                          [
                            4,
                            a.default(r, {
                              headers: {
                                Authorization: 'Bearer ' + this.apiKey,
                              },
                            }),
                          ]
                        );
                      case 1:
                        return [4, (n = s.sent()).json()];
                      case 2:
                        if (((i = s.sent()), !u.default(n.status)))
                          return [3, 4];
                        if (429 !== n.status)
                          throw new Error(JSON.stringify(i));
                        return this.retryOnRateLimit
                          ? [
                              4,
                              f.default(
                                r,
                                {
                                  headers: {
                                    Authorization: 'Bearer ' + this.apiKey,
                                  },
                                },
                                this.retryTimeout,
                                this.maxRetry,
                              ),
                            ]
                          : [3, 4];
                      case 3:
                        return [2, s.sent()];
                      case 4:
                        return [2, i];
                      case 5:
                        throw ((o = s.sent()), new Error(o));
                      case 6:
                        return [2];
                    }
                  });
                });
              }),
              (this.createRecord = function (e, t) {
                return i(h, void 0, void 0, function () {
                  var r, n, i, o, l;
                  return s(this, function (s) {
                    switch (s.label) {
                      case 0:
                        return (
                          s.trys.push([0, 5, , 6]),
                          c.default(e, 'table', 'string', !0),
                          c.default(t, 'record', 'object', !0),
                          (r = d + '/' + this.base + '/' + e),
                          (n = { fields: t }),
                          [
                            4,
                            a.default(r, {
                              method: 'post',
                              body: JSON.stringify(n),
                              headers: {
                                Authorization: 'Bearer ' + this.apiKey,
                                'Content-Type': 'application/json',
                              },
                            }),
                          ]
                        );
                      case 1:
                        return [4, (i = s.sent()).json()];
                      case 2:
                        if (((o = s.sent()), !u.default(i.status)))
                          return [3, 4];
                        if (429 !== i.status)
                          throw new Error(JSON.stringify(o));
                        return this.retryOnRateLimit
                          ? [
                              4,
                              f.default(
                                r,
                                {
                                  method: 'post',
                                  body: JSON.stringify(n),
                                  headers: {
                                    Authorization: 'Bearer ' + this.apiKey,
                                    'Content-Type': 'application/json',
                                  },
                                },
                                this.retryTimeout,
                                this.maxRetry,
                              ),
                            ]
                          : [3, 4];
                      case 3:
                        return [2, s.sent()];
                      case 4:
                        return [2, o];
                      case 5:
                        throw ((l = s.sent()), new Error(l));
                      case 6:
                        return [2];
                    }
                  });
                });
              }),
              (this.updateRecord = function (e, t, r) {
                return (
                  void 0 === r && (r = !1),
                  i(h, void 0, void 0, function () {
                    var n, i, o, l, h;
                    return s(this, function (s) {
                      switch (s.label) {
                        case 0:
                          return (
                            s.trys.push([0, 5, , 6]),
                            c.default(e, 'table', 'string', !0),
                            c.default(t, 'record', 'object', !0),
                            (n = d + '/' + this.base + '/' + e + '/' + t.id),
                            (i = t.fields),
                            [
                              4,
                              a.default(n, {
                                method: r ? 'put' : 'patch',
                                body: JSON.stringify({ fields: i }),
                                headers: {
                                  Authorization: 'Bearer ' + this.apiKey,
                                  'Content-Type': 'application/json',
                                },
                              }),
                            ]
                          );
                        case 1:
                          return [4, (o = s.sent()).json()];
                        case 2:
                          if (((l = s.sent()), !u.default(o.status)))
                            return [3, 4];
                          if (429 !== o.status)
                            throw new Error(JSON.stringify(l));
                          return this.retryOnRateLimit
                            ? [
                                4,
                                f.default(
                                  n,
                                  {
                                    method: r ? 'put' : 'patch',
                                    body: JSON.stringify({ fields: i }),
                                    headers: {
                                      Authorization: 'Bearer ' + this.apiKey,
                                      'Content-Type': 'application/json',
                                    },
                                  },
                                  this.retryTimeout,
                                  this.maxRetry,
                                ),
                              ]
                            : [3, 4];
                        case 3:
                          return [2, s.sent()];
                        case 4:
                          return [2, l];
                        case 5:
                          throw ((h = s.sent()), new Error(h));
                        case 6:
                          return [2];
                      }
                    });
                  })
                );
              }),
              (this.deleteRecord = function (e, t) {
                return i(h, void 0, void 0, function () {
                  var r, n, i, o;
                  return s(this, function (s) {
                    switch (s.label) {
                      case 0:
                        return (
                          s.trys.push([0, 5, , 6]),
                          c.default(e, 'table', 'string', !0),
                          c.default(t, 'id', 'string', !0),
                          (r = d + '/' + this.base + '/' + e + '/' + t),
                          [
                            4,
                            a.default(r, {
                              method: 'delete',
                              headers: {
                                Authorization: 'Bearer ' + this.apiKey,
                              },
                            }),
                          ]
                        );
                      case 1:
                        return [4, (n = s.sent()).json()];
                      case 2:
                        if (((i = s.sent()), !u.default(n.status)))
                          return [3, 4];
                        if (429 !== n.status)
                          throw new Error(JSON.stringify(i));
                        return this.retryOnRateLimit
                          ? [
                              4,
                              f.default(
                                r,
                                {
                                  method: 'delete',
                                  headers: {
                                    Authorization: 'Bearer ' + this.apiKey,
                                  },
                                },
                                this.retryTimeout,
                                this.maxRetry,
                              ),
                            ]
                          : [3, 4];
                      case 3:
                        return [2, s.sent()];
                      case 4:
                        return [2, i];
                      case 5:
                        throw ((o = s.sent()), new Error(o));
                      case 6:
                        return [2];
                    }
                  });
                });
              }),
              (this.bulkCreate = function (e, t) {
                return i(h, void 0, void 0, function () {
                  var r, n, i, o, l;
                  return s(this, function (s) {
                    switch (s.label) {
                      case 0:
                        return (
                          s.trys.push([0, 5, , 6]),
                          c.default(e, 'table', 'string', !0),
                          c.default(t, 'records', 'object', !0),
                          (r = d + '/' + this.base + '/' + e),
                          (n = t.map(function (e) {
                            return { fields: e };
                          })),
                          [
                            4,
                            a.default(r, {
                              method: 'post',
                              body: JSON.stringify({ records: n }),
                              headers: {
                                Authorization: 'Bearer ' + this.apiKey,
                                'Content-Type': 'application/json',
                              },
                            }),
                          ]
                        );
                      case 1:
                        return [4, (i = s.sent()).json()];
                      case 2:
                        if (((o = s.sent()), !u.default(i.status)))
                          return [3, 4];
                        if (429 !== i.status)
                          throw new Error(JSON.stringify(o));
                        return this.retryOnRateLimit
                          ? [
                              4,
                              f.default(
                                r,
                                {
                                  method: 'post',
                                  body: JSON.stringify({ records: n }),
                                  headers: {
                                    Authorization: 'Bearer ' + this.apiKey,
                                    'Content-Type': 'application/json',
                                  },
                                },
                                this.retryTimeout,
                                this.maxRetry,
                                'records',
                              ),
                            ]
                          : [3, 4];
                      case 3:
                        return [2, s.sent()];
                      case 4:
                        return [2, o.records];
                      case 5:
                        throw ((l = s.sent()), new Error(l));
                      case 6:
                        return [2];
                    }
                  });
                });
              }),
              (this.bulkUpdate = function (e, t) {
                return i(h, void 0, void 0, function () {
                  var r, n, i, o;
                  return s(this, function (s) {
                    switch (s.label) {
                      case 0:
                        return (
                          s.trys.push([0, 5, , 6]),
                          c.default(e, 'table', 'string', !0),
                          c.default(t, 'records', 'object', !0),
                          (r = d + '/' + this.base + '/' + e),
                          [
                            4,
                            a.default(r, {
                              method: 'patch',
                              body: JSON.stringify({ records: t }),
                              headers: {
                                Authorization: 'Bearer ' + this.apiKey,
                                'Content-Type': 'application/json',
                              },
                            }),
                          ]
                        );
                      case 1:
                        return [4, (n = s.sent()).json()];
                      case 2:
                        if (((i = s.sent()), !u.default(n.status)))
                          return [3, 4];
                        if (429 !== n.status)
                          throw new Error(JSON.stringify(i));
                        return this.retryOnRateLimit
                          ? [
                              4,
                              f.default(
                                r,
                                {
                                  method: 'patch',
                                  body: JSON.stringify({ records: t }),
                                  headers: {
                                    Authorization: 'Bearer ' + this.apiKey,
                                    'Content-Type': 'application/json',
                                  },
                                },
                                this.retryTimeout,
                                this.maxRetry,
                                'records',
                              ),
                            ]
                          : [3, 4];
                      case 3:
                        return [2, s.sent()];
                      case 4:
                        return [2, i.records];
                      case 5:
                        throw ((o = s.sent()), new Error(o));
                      case 6:
                        return [2];
                    }
                  });
                });
              }),
              (this.bulkDelete = function (e, t) {
                return i(h, void 0, void 0, function () {
                  var r, n, i, o, l;
                  return s(this, function (s) {
                    switch (s.label) {
                      case 0:
                        return (
                          s.trys.push([0, 5, , 6]),
                          c.default(e, 'table', 'string', !0),
                          c.default(t, 'ids', 'object', !0),
                          (r = ''),
                          t.forEach(function (e, t) {
                            r =
                              0 !== t
                                ? r + '&records[]=' + e
                                : 'records[]=' + e;
                          }),
                          (n =
                            d + '/' + this.base + '/' + e + '?' + encodeURI(r)),
                          [
                            4,
                            a.default(n, {
                              method: 'delete',
                              headers: {
                                Authorization: 'Bearer ' + this.apiKey,
                              },
                            }),
                          ]
                        );
                      case 1:
                        return [4, (i = s.sent()).json()];
                      case 2:
                        if (((o = s.sent()), !u.default(i.status)))
                          return [3, 4];
                        if (429 !== i.status)
                          throw new Error(JSON.stringify(o));
                        return this.retryOnRateLimit
                          ? [
                              4,
                              f.default(
                                n,
                                {
                                  method: 'delete',
                                  headers: {
                                    Authorization: 'Bearer ' + this.apiKey,
                                  },
                                },
                                this.retryTimeout,
                                this.maxRetry,
                                'records',
                              ),
                            ]
                          : [3, 4];
                      case 3:
                        return [2, s.sent()];
                      case 4:
                        return [2, o.records];
                      case 5:
                        throw ((l = s.sent()), new Error(l));
                      case 6:
                        return [2];
                    }
                  });
                });
              }),
              (this.upsertRecord = function (e, t, r) {
                return i(h, void 0, void 0, function () {
                  var n;
                  return s(this, function (i) {
                    switch (i.label) {
                      case 0:
                        return (
                          c.default(e, 'table', 'string', !0),
                          c.default(t, 'filterString', 'string', !0),
                          c.default(r, 'record', 'object', !0),
                          [4, this.select(e, { filterByFormula: t })]
                        );
                      case 1:
                        return (n = i.sent())[0]
                          ? [3, 3]
                          : [4, this.createRecord(e, r)];
                      case 2:
                        return [2, i.sent()];
                      case 3:
                        return [
                          4,
                          this.updateRecord(e, { id: n[0].id, fields: r }),
                        ];
                      case 4:
                        return [2, i.sent()];
                    }
                  });
                });
              }),
              !e)
            )
              throw new Error('API Key is required.');
            if (!t) throw new Error('Base ID is required.');
            (this.apiKey = e),
              (this.base = t),
              (this.retryOnRateLimit =
                (null == r ? void 0 : r.retryOnRateLimit) || !0),
              (this.retryTimeout =
                (null == r ? void 0 : r.retryTimeout) || 5e3),
              (this.maxRetry = (null == r ? void 0 : r.maxRetry) || 6e4);
          };
        (t.default = h),
          'undefined' != typeof window && (window.AsyncAirtable = h);
      },
      934: (e, t) => {
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.default = function (e) {
            var t = Object.keys(e)
              .map(function (t, r) {
                var n,
                  i = e[t];
                return (
                  (n = Array.isArray(i)
                    ? i
                        .map(function (e, r) {
                          switch (typeof e) {
                            case 'object':
                              return Object.keys(e)
                                .map(function (n) {
                                  return t + '[' + r + '][' + n + ']=' + e[n];
                                })
                                .join('&');
                            case 'string':
                              return t + '[]=' + e;
                          }
                        })
                        .join('&')
                    : t + '=' + i),
                  0 !== r ? '&' + n : n
                );
              })
              .join('');
            return encodeURI(t);
          });
      },
      202: (e, t) => {
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.default = function (e, t, r, n) {
            if (!e && n) throw new Error('Argument "' + t + '" is required.');
            if (e && typeof e !== r)
              throw new Error(
                'Incorrect data type on argument "' +
                  t +
                  '". Received "' +
                  typeof e +
                  '": expected "' +
                  r +
                  '"',
              );
          });
      },
      365: (e, t) => {
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.default = function (e) {
            return !(e < 300 && e >= 200);
          });
      },
      480: (e, t, r) => {
        Object.defineProperty(t, '__esModule', { value: !0 });
        var n = r(300);
        t.default =
          'undefined' != typeof window ? window.fetch.bind(window) : n;
      },
      595: function (e, t, r) {
        var n =
            (this && this.__awaiter) ||
            function (e, t, r, n) {
              return new (r || (r = Promise))(function (i, s) {
                function a(e) {
                  try {
                    u(n.next(e));
                  } catch (e) {
                    s(e);
                  }
                }
                function o(e) {
                  try {
                    u(n.throw(e));
                  } catch (e) {
                    s(e);
                  }
                }
                function u(e) {
                  var t;
                  e.done
                    ? i(e.value)
                    : ((t = e.value),
                      t instanceof r
                        ? t
                        : new r(function (e) {
                            e(t);
                          })).then(a, o);
                }
                u((n = n.apply(e, t || [])).next());
              });
            },
          i =
            (this && this.__generator) ||
            function (e, t) {
              var r,
                n,
                i,
                s,
                a = {
                  label: 0,
                  sent: function () {
                    if (1 & i[0]) throw i[1];
                    return i[1];
                  },
                  trys: [],
                  ops: [],
                };
              return (
                (s = { next: o(0), throw: o(1), return: o(2) }),
                'function' == typeof Symbol &&
                  (s[Symbol.iterator] = function () {
                    return this;
                  }),
                s
              );
              function o(s) {
                return function (o) {
                  return (function (s) {
                    if (r)
                      throw new TypeError('Generator is already executing.');
                    for (; a; )
                      try {
                        if (
                          ((r = 1),
                          n &&
                            (i =
                              2 & s[0]
                                ? n.return
                                : s[0]
                                ? n.throw || ((i = n.return) && i.call(n), 0)
                                : n.next) &&
                            !(i = i.call(n, s[1])).done)
                        )
                          return i;
                        switch (
                          ((n = 0), i && (s = [2 & s[0], i.value]), s[0])
                        ) {
                          case 0:
                          case 1:
                            i = s;
                            break;
                          case 4:
                            return a.label++, { value: s[1], done: !1 };
                          case 5:
                            a.label++, (n = s[1]), (s = [0]);
                            continue;
                          case 7:
                            (s = a.ops.pop()), a.trys.pop();
                            continue;
                          default:
                            if (
                              !(
                                (i =
                                  (i = a.trys).length > 0 && i[i.length - 1]) ||
                                (6 !== s[0] && 2 !== s[0])
                              )
                            ) {
                              a = 0;
                              continue;
                            }
                            if (
                              3 === s[0] &&
                              (!i || (s[1] > i[0] && s[1] < i[3]))
                            ) {
                              a.label = s[1];
                              break;
                            }
                            if (6 === s[0] && a.label < i[1]) {
                              (a.label = i[1]), (i = s);
                              break;
                            }
                            if (i && a.label < i[2]) {
                              (a.label = i[2]), a.ops.push(s);
                              break;
                            }
                            i[2] && a.ops.pop(), a.trys.pop();
                            continue;
                        }
                        s = t.call(e, a);
                      } catch (e) {
                        (s = [6, e]), (n = 0);
                      } finally {
                        r = i = 0;
                      }
                    if (5 & s[0]) throw s[1];
                    return { value: s[0] ? s[1] : void 0, done: !0 };
                  })([s, o]);
                };
              }
            };
        Object.defineProperty(t, '__esModule', { value: !0 });
        var s = r(480);
        t.default = function (e, t, r, a, o) {
          return n(void 0, void 0, void 0, function () {
            return i(this, function (u) {
              return [
                2,
                new Promise(function (u, c) {
                  var f = function (e, t, r, a, o) {
                    a && a < 1 && c('Max timeout exceeded'),
                      setTimeout(function () {
                        return n(void 0, void 0, void 0, function () {
                          var n, d, l;
                          return i(this, function (i) {
                            switch (i.label) {
                              case 0:
                                return (
                                  i.trys.push([0, 3, , 4]), [4, s.default(e, t)]
                                );
                              case 1:
                                return [4, (n = i.sent()).json()];
                              case 2:
                                return (
                                  (d = i.sent()),
                                  429 === n.status
                                    ? [2, f(e, t, 1.5 * r, a - r, o)]
                                    : (u(o ? d[o] : d), [3, 4])
                                );
                              case 3:
                                return (l = i.sent()), c(l), [3, 4];
                              case 4:
                                return [2];
                            }
                          });
                        });
                      }, r);
                  };
                  f(e, t, r, a, o);
                }),
              ];
            });
          });
        };
      },
      300: (e, t) => {
        var r = (function () {
          if ('undefined' != typeof self) return self;
          if ('undefined' != typeof window) return window;
          if (void 0 !== r) return r;
          throw new Error('unable to locate global object');
        })();
        (e.exports = t = r.fetch),
          r.fetch && (t.default = r.fetch.bind(r)),
          (t.Headers = r.Headers),
          (t.Request = r.Request),
          (t.Response = r.Response);
      },
    },
    t = {};
  !(function r(n) {
    if (t[n]) return t[n].exports;
    var i = (t[n] = { exports: {} });
    return e[n].call(i.exports, i, i.exports, r), i.exports;
  })(132);
})();
